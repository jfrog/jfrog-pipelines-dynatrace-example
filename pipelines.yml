template: true
valuesFilePath: ./values.yml

resources:
  - name: gitRepo   
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.gitRepo.gitProvider }}                      
      path: {{ .Values.gitRepo.path }}   
      branches:
        include: {{ .Values.gitRepo.branch }}   
      buildOn:
        commit: true

  - name: demoappDockerImage
    type: Image
    configuration:
      registry: artifactoryIntegration                                    
      sourceRepository: default-docker-local                             
      imageName: {{ .Values.image.imageName }}       
      imageTag: ${BUILD_NUMBER}

  - name: demoappBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactoryIntegration   
      buildName: demoapp                                 
      buildNumber: ${BUILD_NUMBER}                           

  - name: demoappHelmChart
    type: HelmChart
    configuration:
      sourceArtifactory: artifactoryIntegration       
      repository: art-helm-charts-dynatrace                
      chart: demoapp                           
      version: 0.0.0  

pipelines:
  - name: dynatraceDemo
    configuration:
      environmentVariables:
        readOnly:
          DT_TAG_PROJECT: "dynatrace-demos"
          DT_TAG_STAGE: "dev"
          DT_TAG_SERVICE: "demoapp"
          FEATURE_NUMBER: "1"

    steps:
      - name: aDockerBuild
        type: DockerBuild
        configuration:
          affinityGroup: buildAndPush
          integrations:
            - name: artifactoryIntegration
          inputResources:
            - name: gitRepo
          dockerFileLocation: demoapp
          dockerFileName: Dockerfile
          dockerImageName: {{ .Values.image.imageName }}
          dockerImageTag: ${BUILD_NUMBER}
          dockerOptions: --build-arg FEATURE_NUMBER=${FEATURE_NUMBER}
        execution:
          onStart:
            - add_run_variables BUILD_NUMBER=0.${FEATURE_NUMBER}.${run_number}

      - name: bDockerPush
        type: DockerPush
        configuration:
          affinityGroup: buildAndPush
          autoPublishBuildInfo: true
          integrations:
            - name: artifactoryIntegration                  
          targetRepository: art-docker-dynatrace           
          inputSteps:
            - name: aDockerBuild
          outputResources:
            - name: demoappBuildInfo                         
            - name: demoappDockerImage                       

      - name: cHelmPublish
        type: HelmPublish
        configuration:
          affinityGroup: HelmPublish
          helmVersion: 3                                    
          chartPath: chart
          inputSteps:
            - name: bDockerPush
          inputResources:
            - name: gitRepo
              trigger: false
            - name: demoappDockerImage
          outputResources:
            - name: demoappHelmChart
        execution:
          onStart:
            - APP_VERSION=0.${FEATURE_NUMBER}.${run_number}
            - VALUES_IMAGE=${res_demoappDockerImage_imageName}
            - VALUES_TAG=${res_demoappDockerImage_imageTag}
            - echo "CHART_VERSION = $CHART_VERSION"
            - echo "VALUES_IMAGE = $VALUES_IMAGE"
            - echo "VALUES_TAG = $VALUES_TAG"
            - pushd $res_gitRepo_resourcePath/chart
            - "sed -ie \"s|^image: .*$|image: $VALUES_IMAGE|\" values.yaml"
            - "sed -ie \"s|^imageTag: .*$|imageTag: $VALUES_TAG|\" values.yaml"
            - "sed -ie \"s|^appVersion: .*$|appVersion: $APP_VERSION|\" Chart.yaml"
            - cat values.yaml
            - cat Chart.yaml
            - popd

      - name: dHelmDeploy
        type: HelmDeploy
        configuration:
          lint: true
          dryRun: true 
          helmVersion: 3
          affinityGroup: HelmDeploy
          releaseName: demoapp
          integrations:
            - name: k8sIntegration
            - name: artifactoryIntegration
          inputResources:
            - name: demoappHelmChart
            - name: demoappDockerImage
          inputSteps:
            - name: cHelmPublish
        execution:
          onSuccess:
            - kubectl config current-context
            - kubectl get pods --all-namespaces
            - add_run_variables CLUSTER="$(kubectl config current-context)"

      - name: eAppUpCheck
        type: Bash
        configuration:
          affinityGroup: HelmDeploy
          inputResources:
            - name: gitRepo
          integrations:
            - name: k8sIntegration
          inputSteps:
            - name: dHelmDeploy
        execution:
          onExecute:
            - kubectl config current-context
            - APP_IP=$(kubectl -n dev get service demoapp -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
            - add_run_variables APP_URL="http://${APP_IP}:8080"
            - $res_gitRepo_resourcePath/scripts/appUpCheck.sh ${APP_URL}

      - name: fModifyHelmChartProperties
        type: Bash
        configuration:
          affinityGroup: Configuration
          integrations:
            - name: artifactoryIntegration
          inputResources:
            - name: demoappHelmChart
            - name: gitRepo
          inputSteps:
            - name: eAppUpCheck
        execution:
          onExecute:
            - JFROG_BASE_URL=${int_artifactoryIntegration_url}
            - JFROG_API_KEY=${int_artifactoryIntegration_apikey}
            - CHART_REPO=${res_demoappHelmChart_repository}
            - add_run_variables CHART=demoapp-${res_demoappHelmChart_version}
            - $res_gitRepo_resourcePath/scripts/updateHelmChartProperties.sh ${JFROG_BASE_URL} ${JFROG_API_KEY} ${CHART_REPO} ${CHART} ${CLUSTER}

      - name: gConfigureDynatrace
        type: Bash
        configuration:
          affinityGroup: Configuration
          runtime:
            type: host
          inputResources:
            - name: gitRepo
          integrations:
            - name: dynatraceIntegration
          inputSteps:
            - name: fModifyHelmChartProperties
        execution:
          onExecute:
            - DT_BASEURL=${int_dynatraceIntegration_DT_URL}
            - DT_API_TOKEN=${int_dynatraceIntegration_DT_API_TOKEN}
            - docker run -e DT_BASEURL=$DT_BASEURL -e DT_API_TOKEN=$DT_API_TOKEN -e NEW_CLI=1 -v $res_gitRepo_resourcePath:/monaco-mount/ dynatraceace/monaco-runner:release-v1.5.3 "monaco deploy -v --environments /monaco-mount/monaco/environments.yml --project demoapp /monaco-mount/monaco/projects"

      - name: hPostDynatraceEvent
        type: Bash
        configuration:
          affinityGroup: Configuration
          integrations:
            - name: dynatraceIntegration
          inputResources:
            - name: gitRepo
            - name: demoappHelmChart
            - name: demoappDockerImage
          inputSteps:
            - name: gConfigureDynatrace
        execution:
          onExecute:
            - DT_BASEURL=${int_dynatraceIntegration_DT_URL}
            - DT_API_TOKEN=${int_dynatraceIntegration_DT_API_TOKEN}
            - DEPLOYMENT_PROJECT=DemoProject
            - DEPLOYMENT_VERSION=${BUILD_NUMBER}
            - CI_BACK_LINK=${JFROG_CLI_BUILD_URL}
            - SOURCE="JFrog"
            - IMAGE_NAME="${res_demoappDockerImage_imageName}:${res_demoappDockerImage_imageTag}"
            - HELM_CHART="${CHART}"
            - PIPELINE_REPO=${res_gitRepo_gitRepoRepositoryUrl}
            - JFROG_PIPELINE_NAME=${pipeline_name}
            - JFROG_RUN_NUMBER=${run_number}
            - JFROG_PROJECT=${project_name}
            - TAG_RULE="{\"meTypes\":[\"PROCESS_GROUP_INSTANCE\"],\"tags\":[{\"context\":\"CONTEXTLESS\",\"key\":\"service\",\"value\":\"$DT_TAG_SERVICE\"},{\"context\":\"CONTEXTLESS\",\"key\":\"project\",\"value\":\"$DT_TAG_PROJECT\"},{\"context\":\"CONTEXTLESS\",\"key\":\"stage\",\"value\":\"$DT_TAG_STAGE\"}]}"
            - $res_gitRepo_resourcePath/scripts/sendDynatraceEvent.sh ${DT_BASEURL} ${DT_API_TOKEN} ${DEPLOYMENT_PROJECT} ${DEPLOYMENT_VERSION} ${CI_BACK_LINK} ${SOURCE} ${IMAGE_NAME} ${HELM_CHART} ${PIPELINE_REPO} ${JFROG_PIPELINE_NAME} ${JFROG_RUN_NUMBER} ${JFROG_PROJECT} ${APP_URL} ${TAG_RULE}
            